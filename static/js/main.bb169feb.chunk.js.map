{"version":3,"sources":["containers/App/style.module.css","game/modules/game/settingsConfig.ts","game/modules/game/circle/preload.ts","game/modules/scenes/assets/preloadData.ts","game/modules/scenes/modules/Player.ts","game/modules/scenes/Default.ts","game/modules/service/config.ts","game/index.tsx","game/instance.ts","containers/App/index.tsx","index.js","game/style.module.css"],"names":["module","exports","settingsConfig","delta","preloadData","data","forEach","unit","method","content","load","gameResourcesData","assets","Player","scene","map","world","cursors","playerBody","playerVisual","camera","playerParamsConfig","blockMove","left","blocked","time","right","coordinates","x","y","this","createPlayer","createCamera","createTeleport","playerBounce","playerData","getObjectLayer","objects","physics","add","sprite","setAlpha","setBounce","setCircle","width","collider","body","setCollideWorldBounds","setBounds","widthInPixels","heightInPixels","setCollisionByExclusion","input","keyboard","createCursorKeys","player","cameras","main","smoothMoveCameraTowards","target","smoothFactor","undefined","scrollX","scrollY","height","anims","create","key","frames","frameRate","repeat","on","play","destroy","control","resetBlockMove","controlPlayerBody","velocity","angle","maxXVelocity","startedXVelocity","flyXVelocity","wallJumpXVelocity","wallJumpYVelocity","jumpVelocity","inertia","playerAcceleration","oldVelocityX","isDown","none","down","up","setBlockMove","setVelocityX","Math","max","setVelocityY","min","direction","moveBlockTime","canLeftMove","canRightMove","DefaultScene","playerClass","call","make","tilemap","tileset","addTilesetImage","createLayer","update","Scene","config","type","Phaser","AUTO","parent","backgroundColor","default","arcade","gravity","debug","game","Game","useState","refBox","setRefBox","useEffect","setTimeout","offsetWidth","className","css","root","id","ref","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb169feb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__3ua4_\"};","export const settingsConfig = {\r\n  gravity: 500,\r\n  maxXVelocity: 800,\r\n  startedXVelocity: 250,\r\n  flyXVelocity: 2,\r\n  jumpVelocity: 300,\r\n  inertia: 100,\r\n\r\n  wallJumpXVelocity: 500,\r\n  wallJumpYVelocity: 400,\r\n\r\n  moveBlockTime: 500, //ms\r\n  playerBounce: 0.2,\r\n\r\n  playerAcceleration: (delta: number) => delta / 2,\r\n};\r\n","import { Scene } from \"phaser\";\r\nimport { PreloadTypes } from \"./types\";\r\n\r\nexport function preloadData(this: Scene, data: PreloadTypes[]) {\r\n  data.forEach((unit) => {\r\n    const { method, data } = unit;\r\n\r\n    data.forEach((content) => {\r\n      // @ts-ignore: Unreachable code error\r\n      const result = this.load[method](...content);\r\n    });\r\n  });\r\n}\r\n","import { PreloadTypes } from \"../../game/circle/types\";\r\n\r\nconst assets = \"assets/\";\r\n\r\nexport const gameResourcesData: PreloadTypes[] = [\r\n  {\r\n    method: \"image\",\r\n    data: [\r\n      [\"platforms32x32\", assets + \"platforms/platforms32x32.png\"],\r\n      [\"playerSprite\", assets + \"player/body.png\"],\r\n      [\"playerBody\", assets + \"player/ball.png\"],\r\n    ],\r\n  },\r\n\r\n  {\r\n    method: \"tilemapTiledJSON\",\r\n    data: [[\"map\", assets + \"levels/default_level.json\"]],\r\n  },\r\n\r\n  {\r\n    method: \"atlas\",\r\n    data: [\r\n      [\r\n        \"teleport\",\r\n        assets + \"effects/teleport.png\",\r\n        assets + \"effects/teleport_atlas.json\",\r\n      ],\r\n    ],\r\n  },\r\n];\r\n","import { Scene } from \"phaser\";\r\nimport { PlayerParamsConfig } from \"../../game/circle/types\";\r\nimport { settingsConfig } from \"../../game/settingsConfig\";\r\n\r\nexport class Player {\r\n  cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\r\n  playerBody!: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\r\n  playerVisual!: Phaser.GameObjects.Sprite;\r\n  camera!: Phaser.Cameras.Scene2D.Camera;\r\n  playerParamsConfig: PlayerParamsConfig = {\r\n    blockMove: {\r\n      left: {\r\n        blocked: false,\r\n        time: 0,\r\n      },\r\n      right: {\r\n        blocked: false,\r\n        time: 0,\r\n      },\r\n    },\r\n  };\r\n  coordinates = {\r\n    x: 0,\r\n    y: 0,\r\n  };\r\n\r\n  constructor(\r\n    scene: Scene,\r\n    map: Phaser.Tilemaps.Tilemap,\r\n    world: Phaser.Tilemaps.TilemapLayer\r\n  ) {\r\n    this.createPlayer(scene, map, world);\r\n    this.createCamera(scene, map, this.playerBody);\r\n    this.createTeleport(scene, this.playerBody);\r\n  }\r\n\r\n  createPlayer(\r\n    scene: Scene,\r\n    map: Phaser.Tilemaps.Tilemap,\r\n    world: Phaser.Tilemaps.TilemapLayer\r\n  ) {\r\n    const { playerBounce } = settingsConfig;\r\n    const layer = map.getObjectLayer(\"player\");\r\n    const playerData = layer.objects[0];\r\n\r\n    this.playerBody = scene.physics.add\r\n      .sprite(playerData.x || 0, playerData.y || 0, \"playerSprite\")\r\n      .setAlpha(0);\r\n    this.playerVisual = scene.add.sprite(\r\n      this.playerBody.x,\r\n      this.playerBody.y,\r\n      \"playerBody\"\r\n    );\r\n    this.playerBody\r\n      .setBounce(playerBounce)\r\n      .setCircle(this.playerBody.width / 2);\r\n    scene.physics.add.collider(this.playerBody, world);\r\n    this.playerBody.body.setCollideWorldBounds(true);\r\n    scene.physics.world.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\r\n    world.setCollisionByExclusion([-1], true);\r\n\r\n    this.cursors = scene.input.keyboard.createCursorKeys();\r\n  }\r\n\r\n  createCamera(\r\n    scene: Scene,\r\n    map: Phaser.Tilemaps.Tilemap,\r\n    player: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody\r\n  ) {\r\n    this.camera = scene.cameras.main;\r\n    this.camera.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\r\n    this.smoothMoveCameraTowards(player);\r\n  }\r\n\r\n  smoothMoveCameraTowards(\r\n    target: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody | null,\r\n    smoothFactor?: number\r\n  ) {\r\n    if (this.camera && target) {\r\n      if (smoothFactor === undefined) {\r\n        smoothFactor = 0;\r\n      }\r\n      this.camera.scrollX =\r\n        smoothFactor * this.camera.scrollX +\r\n        (1 - smoothFactor) * (target.x - this.camera.width * 0.5);\r\n      this.camera.scrollY =\r\n        smoothFactor * this.camera.scrollY +\r\n        (1 - smoothFactor) * (target.y - this.camera.height * 0.5);\r\n    }\r\n  }\r\n\r\n  createTeleport(\r\n    scene: Scene,\r\n    player: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody\r\n  ) {\r\n    scene.anims.create({\r\n      key: \"teleportAnimation\",\r\n      frames: \"teleport\",\r\n      frameRate: 20,\r\n      repeat: 0,\r\n    });\r\n    scene.input.keyboard.on(\"keydown-ENTER\", () => {\r\n      this.coordinates = {\r\n        x: player.x || 0,\r\n        y: player.y || 0,\r\n      };\r\n    });\r\n\r\n    scene.input.keyboard.on(\"keydown-SPACE\", () => {\r\n      const { x, y } = this.coordinates;\r\n      if (player) {\r\n        player.x = x;\r\n        player.y = y;\r\n      }\r\n\r\n      const sprite = scene.add\r\n        .sprite(x, y, \"teleport\")\r\n        .play(\"teleportAnimation\")\r\n        .on(\"complete\", () => {\r\n          sprite.destroy();\r\n        });\r\n    });\r\n  }\r\n\r\n  update(time: number, delta: number) {\r\n    this.control(delta, time);\r\n    this.resetBlockMove(time);\r\n    this.controlPlayerBody(delta);\r\n    this.smoothMoveCameraTowards(this.playerBody, 0.9);\r\n  }\r\n\r\n  controlPlayerBody(delta: number) {\r\n    this.playerVisual.x = this.playerBody.x;\r\n    this.playerVisual.y = this.playerBody.y;\r\n\r\n    if (this.playerBody.body.velocity.x) {\r\n      this.playerVisual.angle +=\r\n        delta * 0.003 * this.playerBody.body.velocity.x;\r\n    }\r\n  }\r\n\r\n  control(delta: number, time: number) {\r\n    const {\r\n      maxXVelocity,\r\n      startedXVelocity,\r\n      flyXVelocity,\r\n      wallJumpXVelocity,\r\n      wallJumpYVelocity,\r\n      jumpVelocity,\r\n      inertia,\r\n      playerAcceleration,\r\n    } = settingsConfig;\r\n\r\n    const { velocity } = this.playerBody.body;\r\n    const oldVelocityX = velocity.x;\r\n\r\n    ///---- Left\r\n    if (\r\n      this.cursors.left.isDown &&\r\n      !this.playerParamsConfig.blockMove.left.blocked\r\n    ) {\r\n      if (!this.playerBody.body.blocked.none) {\r\n        if (oldVelocityX === 0) {\r\n          velocity.x = -startedXVelocity;\r\n        } else if (oldVelocityX > 0) {\r\n          velocity.x = oldVelocityX * -1;\r\n        } else if (velocity.x > maxXVelocity * -1) {\r\n          velocity.x -= playerAcceleration(delta);\r\n        } else if (velocity.x >= maxXVelocity * -1) {\r\n          velocity.x = maxXVelocity * -1;\r\n        }\r\n      } else {\r\n        velocity.x -= flyXVelocity;\r\n      }\r\n\r\n      ///---- Right\r\n    } else if (\r\n      this.cursors.right.isDown &&\r\n      !this.playerParamsConfig.blockMove.right.blocked\r\n    ) {\r\n      if (!this.playerBody.body.blocked.none) {\r\n        if (oldVelocityX === 0) {\r\n          velocity.x = startedXVelocity;\r\n        } else if (oldVelocityX < 0) {\r\n          velocity.x = oldVelocityX * -1;\r\n        } else if (velocity.x < maxXVelocity) {\r\n          velocity.x += playerAcceleration(delta);\r\n        } else if (velocity.x >= maxXVelocity) {\r\n          velocity.x = maxXVelocity;\r\n        }\r\n      } else {\r\n        velocity.x += flyXVelocity;\r\n      }\r\n      ///---- None\r\n    } else {\r\n      if (this.playerBody.body.blocked.down) {\r\n        if (velocity.x > inertia) {\r\n          velocity.x -= delta * 2;\r\n        } else if (velocity.x < -inertia) {\r\n          velocity.x += delta * 2;\r\n        } else {\r\n          velocity.x = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    ///---- Up\r\n    if (this.cursors.up.isDown) {\r\n      if (this.playerBody.body.blocked.left) {\r\n        this.setBlockMove(\"left\", time);\r\n        this.playerBody.setVelocityX(Math.max(wallJumpXVelocity, oldVelocityX));\r\n        this.playerBody.setVelocityY(-wallJumpYVelocity);\r\n      } else if (this.playerBody.body.blocked.right) {\r\n        this.setBlockMove(\"right\", time);\r\n        this.playerBody.setVelocityX(\r\n          Math.min(-wallJumpXVelocity, oldVelocityX)\r\n        );\r\n        this.playerBody.setVelocityY(-wallJumpYVelocity);\r\n      } else if (this.playerBody.body.blocked.down) {\r\n        this.playerBody.setVelocityY(-jumpVelocity);\r\n      }\r\n    }\r\n  }\r\n  setBlockMove(direction: keyof PlayerParamsConfig[\"blockMove\"], time: number) {\r\n    const { blockMove } = this.playerParamsConfig;\r\n    blockMove[direction].blocked = true;\r\n    blockMove[direction].time = time;\r\n  }\r\n\r\n  resetBlockMove(time: number) {\r\n    const { moveBlockTime } = settingsConfig; //ms\r\n    const { left, right } = this.playerParamsConfig.blockMove;\r\n\r\n    const canLeftMove = time - left.time > moveBlockTime;\r\n\r\n    const canRightMove = time - right.time > moveBlockTime;\r\n\r\n    if (canLeftMove) {\r\n      left.blocked = false;\r\n    }\r\n\r\n    if (canRightMove) {\r\n      right.blocked = false;\r\n    }\r\n  }\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { preloadData } from \"../game/circle/preload\";\r\nimport { PlayerParamsConfig } from \"../game/circle/types\";\r\nimport { gameResourcesData } from \"./assets/preloadData\";\r\nimport { Player } from \"./modules\";\r\n\r\nexport default class DefaultScene extends Scene {\r\n  playerClass: Player | null = null;\r\n\r\n  cursors: Phaser.Types.Input.Keyboard.CursorKeys | null = null;\r\n  player: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody | null = null;\r\n  playerBody: Phaser.GameObjects.Sprite | null = null;\r\n  coordinates = {\r\n    x: 0,\r\n    y: 0,\r\n  };\r\n  playerParamsConfig: PlayerParamsConfig = {\r\n    blockMove: {\r\n      left: {\r\n        blocked: false,\r\n        time: 0,\r\n      },\r\n      right: {\r\n        blocked: false,\r\n        time: 0,\r\n      },\r\n    },\r\n  };\r\n\r\n  camera: Phaser.Cameras.Scene2D.Camera | null = null;\r\n\r\n  preload() {\r\n    preloadData.call(this, gameResourcesData);\r\n  }\r\n  create() {\r\n    const map = this.make.tilemap({ key: \"map\" });\r\n    const tileset = map.addTilesetImage(\"platforms32x32\", \"platforms32x32\");\r\n    const world = map.createLayer(0, tileset, 0, 0);\r\n\r\n    this.playerClass = new Player(this, map, world);\r\n  }\r\n\r\n  update(time: number, delta: number) {\r\n    this.playerClass?.update(time, delta);\r\n  }\r\n}\r\n","import { settingsConfig } from \"../game/settingsConfig\";\r\nimport DefaultScene from \"../scenes/Default\";\r\n\r\nexport const config: Phaser.Types.Core.GameConfig = {\r\n  type: Phaser.AUTO,\r\n  parent: \"game-box\",\r\n  height: 720,\r\n  width: 1280,\r\n  scene: [DefaultScene],\r\n  backgroundColor: 0x14003b,\r\n  // transparent: true,\r\n  physics: {\r\n    default: \"arcade\",\r\n    arcade: {\r\n      gravity: { y: settingsConfig.gravity },\r\n      debug: true,\r\n    },\r\n  },\r\n};\r\n","import { useEffect, useLayoutEffect, useState } from \"react\";\r\n\r\nimport { renderGame } from \"./instance\";\r\nimport css from \"./style.module.css\";\r\n\r\nlet game: Phaser.Game | null = null;\r\n\r\nexport const Game = () => {\r\n  const [refBox, setRefBox] = useState<HTMLDivElement | null>(null);\r\n\r\n  // useLayoutEffect(() => {\r\n  //   if (refBox) {\r\n  //     game = renderGame(refBox.offsetWidth);\r\n  //   }\r\n  // }, [refBox]);\r\n\r\n  useEffect(() => {\r\n    if (refBox) {\r\n      setTimeout(() => {\r\n        game = renderGame(refBox.offsetWidth);\r\n      }, 0);\r\n    }\r\n\r\n    return () => {\r\n      game?.destroy(true, false);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div className={css.root}>\r\n      <div\r\n        className={css.game}\r\n        id=\"game-box\"\r\n        ref={(ref) => {\r\n          setRefBox(ref);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import Phaser from \"phaser\";\r\nimport { config } from \"./modules/service/config\";\r\n\r\nexport const renderGame = (w: number) => {\r\n  return new Phaser.Game(config);\r\n};\r\n","import css from \"./style.module.css\";\n\nimport { Game } from \"../../game\";\n\nfunction App() {\n  return (\n    <div className={css.root}>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./containers\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__1dm-u\",\"game\":\"style_game__2Ib68\"};"],"sourceRoot":""}